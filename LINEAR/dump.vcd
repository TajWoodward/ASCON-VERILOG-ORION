$date
	Sat Oct 18 17:02:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 64 ! s4 [63:0] $end
$var wire 64 " s3 [63:0] $end
$var wire 64 # s2 [63:0] $end
$var wire 64 $ s1 [63:0] $end
$var wire 64 % s0 [63:0] $end
$var reg 64 & iv [63:0] $end
$var reg 64 ' k0 [63:0] $end
$var reg 64 ( k1 [63:0] $end
$var reg 64 ) n0 [63:0] $end
$var reg 64 * n1 [63:0] $end
$scope module u1 $end
$var wire 64 + IV [63:0] $end
$var wire 64 , k0 [63:0] $end
$var wire 64 - k1 [63:0] $end
$var wire 64 . n0 [63:0] $end
$var wire 64 / n1 [63:0] $end
$var wire 64 0 oIV [63:0] $end
$var wire 64 1 ok0 [63:0] $end
$var wire 64 2 ok1 [63:0] $end
$var wire 64 3 on0 [63:0] $end
$var wire 64 4 on1 [63:0] $end
$var wire 64 5 t1 [63:0] $end
$var wire 64 6 t0 [63:0] $end
$var wire 64 7 d1 [63:0] $end
$var wire 64 8 d0 [63:0] $end
$var wire 64 9 c1 [63:0] $end
$var wire 64 : c0 [63:0] $end
$var wire 64 ; b1 [63:0] $end
$var wire 64 < b0 [63:0] $end
$var wire 64 = a1 [63:0] $end
$var wire 64 > a0 [63:0] $end
$scope module u00 $end
$var wire 6 ? l [5:0] $end
$var wire 64 @ out [63:0] $end
$var wire 64 A x [63:0] $end
$upscope $end
$scope module u01 $end
$var wire 6 B l [5:0] $end
$var wire 64 C out [63:0] $end
$var wire 64 D x [63:0] $end
$upscope $end
$scope module u10 $end
$var wire 6 E l [5:0] $end
$var wire 64 F out [63:0] $end
$var wire 64 G x [63:0] $end
$upscope $end
$scope module u11 $end
$var wire 6 H l [5:0] $end
$var wire 64 I out [63:0] $end
$var wire 64 J x [63:0] $end
$upscope $end
$scope module u20 $end
$var wire 6 K l [5:0] $end
$var wire 64 L out [63:0] $end
$var wire 64 M x [63:0] $end
$upscope $end
$scope module u21 $end
$var wire 6 N l [5:0] $end
$var wire 64 O out [63:0] $end
$var wire 64 P x [63:0] $end
$upscope $end
$scope module u30 $end
$var wire 6 Q l [5:0] $end
$var wire 64 R out [63:0] $end
$var wire 64 S x [63:0] $end
$upscope $end
$scope module u31 $end
$var wire 6 T l [5:0] $end
$var wire 64 U out [63:0] $end
$var wire 64 V x [63:0] $end
$upscope $end
$scope module u40 $end
$var wire 6 W l [5:0] $end
$var wire 64 X out [63:0] $end
$var wire 64 Y x [63:0] $end
$upscope $end
$scope module u41 $end
$var wire 6 Z l [5:0] $end
$var wire 64 [ out [63:0] $end
$var wire 64 \ x [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1001101111110011011001111101010110001111110100100001000111111111 \
b1110101011000111111010010000100011111111110011011111100110110011 [
b101001 Z
b1001101111110011011001111101010110001111110100100001000111111111 Y
b1111111100110111111001101100111110101011000111111010010000100011 X
b111 W
b11011010011100100000000001111100111010111010001101000011101010 V
b110100001110101000110110100111001000000000011111001110101110100 U
b10001 T
b11011010011100100000000001111100111010111010001101000011101010 S
b11101010001101101001110010000000000111110011101011101000110100 R
b1010 Q
b1100011101001111001001101011001100001010100011000100010010110010 P
b1100101100011101001111001001101011001100001010100011000100010010 O
b110 N
b1100011101001111001001101011001100001010100011000100010010110010 M
b110001110100111100100110101100110000101010001100010001001011001 L
b1 K
b10011001011111000111000001001010001000100011100001010100011010 J
b10010100010001000111000010101000110100010011001011111000111000 I
b100111 H
b10011001011111000111000001001010001000100011100001010100011010 G
b11001011111000111000001001010001000100011100001010100011010001 F
b111101 E
b1000000001000000000011000000011000000000000000000000000000000000 D
b100000000100000000001100000001100000 C
b11100 B
b1000000001000000000011000000011000000000000000000000000000000000 A
b100000000100000000001100000001100000000000000 @
b10011 ?
b11001011111000111000001001010001000100011100001010100011010001 >
b10010100010001000111000010101000110100010011001011111000111000 =
b110001110100111100100110101100110000101010001100010001001011001 <
b1100101100011101001111001001101011001100001010100011000100010010 ;
b11101010001101101001110010000000000111110011101011101000110100 :
b110100001110101000110110100111001000000000011111001110101110100 9
b1111111100110111111001101100111110101011000111111010010000100011 8
b1110101011000111111010010000100011111111110011011111100110110011 7
b100000000100000000001100000001100000000000000 6
b100000000100000000001100000001100000 5
b1000111000000011011010000001001011011011000000000100110001101111 4
b110010001100100001111000111000101111101001010011111011110101010 3
b110111111110101100010010111000001000011111000000101011111111001 2
b11000110110110111000001010110011111000101100100000001111110011 1
b1000000001000000000111000000011000000101100000000000000001100000 0
b1001101111110011011001111101010110001111110100100001000111111111 /
b11011010011100100000000001111100111010111010001101000011101010 .
b1100011101001111001001101011001100001010100011000100010010110010 -
b10011001011111000111000001001010001000100011100001010100011010 ,
b1000000001000000000011000000011000000000000000000000000000000000 +
b1001101111110011011001111101010110001111110100100001000111111111 *
b11011010011100100000000001111100111010111010001101000011101010 )
b1100011101001111001001101011001100001010100011000100010010110010 (
b10011001011111000111000001001010001000100011100001010100011010 '
b1000000001000000000011000000011000000000000000000000000000000000 &
b1000000001000000000111000000011000000101100000000000000001100000 %
b11000110110110111000001010110011111000101100100000001111110011 $
b110111111110101100010010111000001000011111000000101011111111001 #
b110010001100100001111000111000101111101001010011111011110101010 "
b1000111000000011011010000001001011011011000000000100110001101111 !
$end
#10000
